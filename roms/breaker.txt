clear

: block
  0xff

: paddle
  0xff
  
: ball
  0x80
  
: breakBrick
	0xc0

  
# Temp storage for hundreds, tens and ones
: digits 0 0 0
  

: main
	:alias score v9
  :alias scoreX va
  :alias scoreY vb
  :alias livesX vc
  :alias livesY vd
  
  updateScore

  vd := 0 # x position
  vc := 5 # y position
  i := block

  loop
    if vc == 18 then jump game
    sprite vd vc 1
    vd += 8
    if vd >= 59 begin
    vd := 2
    vc += 1
    end
  again
   
  drawLives
  :alias lives vd
  lives := 4
  
  : game
    # draw ball starting position
    :alias ballx v3
    ballx := 32 # ball x position
    :alias bally v4
    bally := 20 # ball y position
    :alias dirx v5
    dirx := 1 # ball x direction
    :alias diry v6
    diry := -1 # ball y direction
    i := ball
    sprite ballx bally 1
    
    # paddle starting position
    :alias paddlex v0
    paddlex := 28
    :alias paddley v1
    paddley := 29
    i := paddle
    sprite paddlex paddley 1
    
   : mainLoop
    loop # main game loop
      updateBall
      if vf != 0 then updateBricks
      updatePaddle
    if lives != 0 then again
    jump gameOver
    
    
####################################################
# 				Lives Functions
####################################################

: drawLives
  livesX := 50
  livesY := 0
  i := ball
	sprite livesX livesY 1
  livesX += 3
  sprite livesX livesY 1
  livesX += 3
  sprite livesX livesY 1
  livesX += 3
  sprite livesX livesY 1
  return
  
: deleteLives
	v7 := lives
	if lives == 2 begin
  	livesX := 50
    livesY := 0
    sprite livesX livesY 1
  end
  
  if lives == 1 begin
  	livesX := 53
    livesY := 0
    sprite livesX livesY 1
  end
  
  if lives == 1 begin
  	livesX := 56
    livesY := 0
    sprite livesX livesY 1
  end
  
  if lives == 0 begin
  	livesX := 59
    livesY := 0
    sprite livesX livesY 1
  end
  lives := v7
  return
  
####################################################
# 				Movement Functions
####################################################

: updateBall
  i := ball
  sprite ballx bally 1
  if bally == 31 then reset
  if ballx == 63 then dirx := -1
  if ballx == 0 then dirx := 1
  if bally == 0 then diry := 1

  ballx += dirx
  bally += diry
  sprite ballx bally 1
  return

   
: updatePaddle
  
  i := paddle
  sprite paddlex paddley 1
  v7 := 4
  if v7 key then v0 += -1
  v8 := 6
  if v8 key then v0 += 1
  paddlex := v0
  paddley := v1
  sprite paddlex paddley 1
  return


: reset
  bally := 28
  ballx := 32
  dirx := 1
  diry := -1
  lives += -1
  return
  
: reverse
  diry := -1
  dirx := 1
  return
  
  
  
: reflect
	dirx := 0
  diry := -1
  jump mainLoop
  
  
: paddleReflect
	v2 := paddlex
  v2 += 4
  if ballx == v2 begin
  	reflect
  else
  	updateDirection
  end
  return
  

: updateDirection

	if diry == -1 begin
  	diry := 1
  else
  	diry := -1
  end
  
  if dirx == 1 begin
   dirx := 1
  else
   dirx := -1
  end
  
  return


####################################################
#					Screen Update Functions
####################################################

: updateBricks
	# ball hits paddle
  if bally == 29 begin 
  	paddleReflect
  else # ball hits bricks
  	if bally >= 5 begin
  	updateScore
  	i := breakBrick
    sprite ballx bally 1
    i := ball
    updateDirection
    score += 1
    updateScore
  	end
  end
  return
  
: updateScore
	v7 := paddlex
  v8 := paddley
	
	i := digits
  bcd score
  i := digits
  load v2
  
  i := hex v0
  sprite scoreX scoreY 5
  scoreX += 5
  
  i := hex v1
  sprite scoreX scoreY 5
  scoreX += 5
  
  i := hex v2
  sprite scoreX scoreY 5
  scoreX += 5
  
  va := 0
  paddlex := v7
  paddley := v8
  return

  
: gameOver